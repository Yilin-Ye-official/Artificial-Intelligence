from utils import *

row_units = [cross(r, cols) for r in rows]
column_units = [cross(rows, c) for c in cols]
square_units = [cross(rs, cs) for rs in ('ABC', 'DEF', 'GHI') for cs in ('123', '456', '789')]
unitlist = row_units + column_units + square_units

# TODO: Update the unit list to add the new diagonal units
unitlist = unitlist+[['A1','B2','C3','D4','E5','F6','G7','H8','I9']]+ [['I1','H2','G3','F4','E5','D6','C7','B8','A9']]


# Must be called after all units (including diagonals) are added to the unitlist
units = extract_units(unitlist, boxes)
peers = extract_peers(units, boxes)



def naked_twins(values):
    """Eliminate values using the naked twins strategy.

    The naked twins strategy says that if you have two or more unallocated boxes
    in a unit and there are only two digits that can go in those two boxes, then
    those two digits can be eliminated from the possible assignments of all other
    boxes in the same unit.

    Parameters
    ----------
    values(dict)
        a dictionary of the form {'box_name': '123456789', ...}

    Returns
    -------
    dict
        The values dictionary with the naked twins eliminated from peers

    Notes
    -----
    Your solution can either process all pairs of naked twins from the input once,
    or it can continue processing pairs of naked twins until there are no such
    pairs remaining -- the project assistant test suite will accept either
    convention. However, it will not accept code that does not process all pairs
    of naked twins from the original input. (For example, if you start processing
    pairs of twins and eliminate another pair of twins before the second pair
    is processed then your code will fail the PA test suite.)

    The first convention is preferred for consistency with the other strategies,
    and because it is simpler (since the reduce_puzzle function already calls this
    strategy repeatedly).

    See Also
    --------
    Pseudocode for this algorithm on github:
    https://github.com/udacity/artificial-intelligence/blob/master/Projects/1_Sudoku/pseudocode.md
    """
    # TODO: Implement this function!
    #raise NotImplementedError
    # element: a single element in all the boxes' names (A1,A2...) on the sudoku board. the keys of the dict values.
    # values.keys(): all the boxes' names (A1,A2...) on the sudoku board. the keys.
    # units[element]: list of all the units
    # eg. units[A1]=
    # [['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9'],
    # ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1'],
    # ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3'],
    # ['A1', 'B2', 'C3', 'D4', 'E5', 'F6', 'G7', 'H8', 'I9']]
    # e_unit = element in unit
    # eg. ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9']
    for element in values.keys():
        if len(values[element]) == 2:
            for peer in peers[element]:
                if values[peer] == values[element] and peer != element:
                    intersection = [box for box in peers[element] if box in peers[peer]]
                    for to_change in intersection:
                        for digit in values[element]:
                            if len(values[to_change]) != 1:
                                values[to_change] = values[to_change].replace(digit, '')
    return values


def eliminate(values):
    """Apply the eliminate strategy to a Sudoku puzzle

    The eliminate strategy says that if a box has a value assigned, then none
    of the peers of that box can have the same value.

    Parameters
    ----------
    values(dict)
        a dictionary of the form {'box_name': '123456789', ...}

    Returns
    -------
    dict
        The values dictionary with the assigned values eliminated from peers
    """
    # TODO: Copy your code from the classroom to complete this function
    #raise NotImplementedError
    # variables same with naked_pair
    for element in values.keys():
        if len(values[element]) == 1:
            digit = values[element]
            for peer in peers[element]:
                if digit in values[peer] and len(values[peer])!= 1:
                    values[peer] = values[peer].replace(digit, '')
    return values

def only_choice(values):
    """Apply the only choice strategy to a Sudoku puzzle

    The only choice strategy says that if only one box in a unit allows a certain
    digit, then that box must be assigned that digit.

    Parameters
    ----------
    values(dict)
        a dictionary of the form {'box_name': '123456789', ...}

    Returns
    -------
    dict
        The values dictionary with all single-valued boxes assigned

    Notes
    -----
    You should be able to complete this function by copying your code from the classroom
    """
    # TODO: Copy your code from the classroom to complete this function
    #raise NotImplementedError
    #unit = [[row],[col],[unit]]
    #peer = element in [row], [col]  eg.'A1'
    #to_change = the element has only choice: '123' -> '1'
    for unit in unitlist:
        for digit in '123456789':
            count = 0
            for peer in unit:
                if digit in values[peer]:
                    count += 1
            if count == 1:
                to_change = [box for box in unit if digit in values[box]]
                for element in to_change:
                    values[element] = digit
    return values


def reduce_puzzle(values):
    """Reduce a Sudoku puzzle by repeatedly applying all constraint strprint(peer)ategies

    Parameters
    ----------
    values(dict)
        a dictionary of the form {'box_name': '123456789', ...}

    Returns
    -------
    dict or False
        The values dictionary after continued application of the constraint strategies
        no longer produces any changes, or False if the puzzle is unsolvable
    """
    # TODO: Copy your code from the classroom and modify it to complete this function
    #raise NotImplementedError
    boxes = values.keys()
    box_before = [box for box in boxes if len(values[box])==1]
    print(values)
    values = eliminate(values)
    display(values)
    values = only_choice(values)
    display(values)
    values = naked_twins(values)
    display(values)
    for box in boxes:
        if values[box] == '':
            return False
    box_after = [box for box in boxes if len(values[box])==1]
    if len(box_before) == len(box_after):
        return values
    return reduce_puzzle(values)


def search(values):
    """Apply depth first search to solve Sudoku puzzles in order to solve puzzles
    that cannot be solved by repeated reduction alone.

    Parameters
    ----------
    values(dict)
        a dictionary of the form {'box_name': '123456789', ...}

    Returns
    -------
    dict or False
        The values dictionary with all boxes assigned or False

    Notes
    -----
    You should be able to complete this function by copying your code from the classroom
    and extending it to call the naked twins strategy.
    """
    # TODO: Copy your code from the classroom to complete this function
    #raise NotImplementedError
    values = reduce_puzzle(values)
    if values == False:
        return False
    print("Pass")
    for box in boxes:
        if values[box] == '':
            return False
    solved = [box for box in values.keys() if len(values[box]) == 1]
    if len(solved) == 81:
        print("Solved!")
        return values
    #helper is a list of tuples which has contents like: [('A1',2),('A3',3),...]
    #use the sort function to sort it
    #fewest is the key with values[key] has the fewest possibilities
    helper = [(key, len(values[key])) for key in values.keys()]
    helper.sort(key=lambda x: x[1])
    fewest = values[helper[0][0]]
    # Now use recursion to solve each one of the resulting sudokus, and if one returns a value (not False), return that answer!
    for number in fewest:
        values[fewest] = number
        solved = [box for box in values.keys() if len(values[box]) == 1]
        if len(solved)==81:
            return search(values)


def solve(grid):
    """Find the solution to a Sudoku puzzle using search and constraint propagation

    Parameters
    ----------
    grid(string)
        a string representing a sudoku grid.

        Ex. '2.............62....1....7...6..8...3...9...7...6..4...4....8....52.............3'

    Returns
    -------
    dict or False
        The dictionary representation of the final sudoku grid or False if no solution exists.
    """
    values = grid2values(grid)
    print(values)
    values = search(values)
    return values


if __name__ == "__main__":
    diag_sudoku_grid = '2.............62....1....7...6..8...3...9...7...6..4...4....8....52.............3'
    display(grid2values(diag_sudoku_grid))
    diag_sudoku_grid = grid2values(diag_sudoku_grid)
    result = solve(diag_sudoku_grid)
    display(result)
    try:
        import PySudoku

        PySudoku.play(grid2values(diag_sudoku_grid), result, history)

    except SystemExit:
        pass
    except:
        print('We could not visualize your board due to a pygame issue. Not a problem! It is not a requirement.')

